#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);


/*
 * Complete the 'efficientJanitor' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts FLOAT_ARRAY weight as parameter.
 */

int efficientJanitor(vector<float> weight) {
int count = 0;
    int i = 0, j = weight.size() - 1;
    std::sort(weight.begin(), weight.end());
    while (i <= j) {
        count++;
        if (weight[i] + weight[j] <= 3.0) {
            i++;
        }
        j--;
    }
    return count;
}
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string weight_count_temp;
    getline(cin, weight_count_temp);

    int weight_count = stoi(ltrim(rtrim(weight_count_temp)));

    vector<float> weight(weight_count);

    for (int i = 0; i < weight_count; i++) {
        string weight_item_temp;
        getline(cin, weight_item_temp);

        float weight_item = stof(ltrim(rtrim(weight_item_temp)));

        weight[i] = weight_item;
    }

    int result = efficientJanitor(weight);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
